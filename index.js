// ===============================
// Bot de M√∫sica com DisTube
// ===============================

const keepAlive = require("./server.js");
require("dotenv").config();
keepAlive();

const { Client, GatewayIntentBits, PermissionsBitField, EmbedBuilder } = require("discord.js");
const { DisTube } = require("distube");
const { YtDlpPlugin } = require("@distube/yt-dlp");
const { YouTubePlugin } = require("@distube/youtube");



// Token seguro via vari√°veis de ambiente (Replit Secrets)
const TOKEN = process.env.TOKEN;

// Criar cliente Discord
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildVoiceStates
  ]
});

// Inicializar DisTube

const distube = new DisTube(client, {
  nsfw: true,
  emitAddSongWhenCreatingQueue: false,
  emitAddListWhenCreatingQueue: false,
  plugins: [
  new YouTubePlugin(),
  new YtDlpPlugin()
]
});



// Quando o bot ligar
client.once("ready", () => {
  console.log(`‚úÖ Bot online como ${client.user.tag}`);
});

// ===============================
// Comandos do bot
// ===============================
client.on("messageCreate", async (message) => {
  if (!message.content.startsWith("!") || message.author.bot) return;

  const args = message.content.split(" ");
  const command = args[0].toLowerCase();

  // !play
  if (command === "!penis") {
    const query = args.slice(1).join(" ").trim();
    if (!query) return message.reply("‚ùå Voc√™ precisa passar um link ou nome da m√∫sica!");

    const voiceChannel = message.member?.voice.channel;
    if (!voiceChannel) return message.reply("‚ùå Voc√™ precisa estar em um canal de voz!");
    if (!voiceChannel.permissionsFor(message.client.user).has([PermissionsBitField.Flags.Connect, PermissionsBitField.Flags.Speak])) {
      return message.reply('‚ùå N√£o tenho permiss√µes para conectar ou falar no canal de voz!');
    }

    try {
      await distube.play(voiceChannel, query, {
        textChannel: message.channel,
        member: message.member
      });
      message.reply(`üé∂ Adicionando: **${query}**`);
    } catch (err) {
      console.error("Erro ao tocar m√∫sica:", err);
      message.reply(`‚ùå Erro ao tentar tocar: ${err.message}`);
    }
  }

  // !skip
  if (command === "!skip") {
    try {
      await distube.skip(message);
      message.reply("‚è≠ M√∫sica pulada!");
    } catch {
      message.reply("‚ùå N√£o tem m√∫sica para pular!");
    }
  }

  // !stop
  if (command === "!stop") {
    try {
      await distube.stop(message);
      message.reply("‚èπ M√∫sica parada e bot saiu do canal.");
    } catch {
      message.reply("‚ùå N√£o tem nada tocando.");
    }
  }

  // !pause
  if (command === "!pause") {
    try {
      await distube.pause(message);
      message.reply("‚è∏ M√∫sica pausada.");
    } catch {
      message.reply("‚ùå N√£o tem m√∫sica tocando.");
    }
  }

  // !resume
  if (command === "!resume") {
    try {
      await distube.resume(message);
      message.reply("‚ñ∂ M√∫sica retomada.");
    } catch {
      message.reply("‚ùå N√£o tem m√∫sica pausada.");
    }
  }

  // !queue
  if (command === "!queue") {
    const queue = distube.getQueue(message);
    if (!queue) return message.reply("‚ùå N√£o h√° m√∫sicas na fila.");

    const q = queue.songs
      .map((song, i) => `${i === 0 ? "üéµ Tocando agora:" : `${i}.`} ${song.name} \`[${song.formattedDuration}]\``)
      .slice(0, 10)
      .join("\n");

    const embed = new EmbedBuilder()
      .setColor("#FFB347")
      .setTitle("üìú Fila de m√∫sicas")
      .setDescription(q)
      .setFooter({ text: `Total: ${queue.songs.length} m√∫sicas` });

    message.channel.send({ embeds: [embed] });
  }

  // !loop
  if (command === "!loop") {
    const queue = distube.getQueue(message);
    if (!queue) return message.reply("‚ùå N√£o h√° nada tocando.");

    let mode = queue.repeatMode;
    mode = (mode + 1) % 3;
    queue.setRepeatMode(mode);

    const modeName = mode === 0 ? "‚ùå Loop desativado" : mode === 1 ? "üîÇ Loop de m√∫sica" : "üîÅ Loop de fila";
    message.reply(modeName);
  }

  // !shuffle
  if (command === "!shuffle") {
    const queue = distube.getQueue(message);
    if (!queue) return message.reply("‚ùå N√£o h√° m√∫sicas na fila.");

    try {
      queue.shuffle();
      message.reply("üîÄ Fila embaralhada com sucesso!");
    } catch (err) {
      console.error("Erro ao embaralhar:", err);
      message.reply("‚ùå N√£o foi poss√≠vel embaralhar a fila.");
    }
  }
});

// ===============================
// Eventos de reprodu√ß√£o
// ===============================
distube.on("playSong", (queue, song) => {
  const embed = new EmbedBuilder()
    .setColor("#1DB954")
    .setTitle(`üéµ Tocando agora:`)
    .setDescription(`[${song.name}](${song.url})`)
    .setThumbnail(song.thumbnail)
    .addFields(
      { name: "üë§ Autor", value: song.uploader.name, inline: true },
      { name: "‚è±Ô∏è Dura√ß√£o", value: song.formattedDuration, inline: true },
      { name: "üé∂ Pedido por", value: `${song.member}`, inline: true }
    )
    .setFooter({ text: "Bot de M√∫sica üéß" })
    .setTimestamp();

  queue.textChannel.send({ embeds: [embed] });
});

distube.on("addList", (queue, playlist) => {
  queue.textChannel.send(`üìë Playlist **${playlist.name}** adicionada com **${playlist.songs.length} m√∫sicas**!`);
});

distube.on("error", (channel, error) => {
  console.error("Erro no DisTube:", error);
  if (channel) channel.send(`‚ùå Ocorreu um erro: ${error.message}`);
});

// Login
client.login(TOKEN);
